# Production/release service configuration. Loads configuration from env and safely handles secrets/credentials.
services:
  db:
    build: backend/db
    environment:
      - POSTGRES_USER=$DB_USERNAME
      - POSTGRES_PASSWORD_FILE=/run/secrets/db_password
      - POSTGRES_DB=$DB_DATABASE
    secrets:
      - db_password
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "$DB_USERNAME", "-d", "$DB_DATABASE"]
      interval: 30s
      start_interval: 5s
      start_period: 30s
      retries: 5

  redis:
    image: redis:latest
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      retries: 5
      start_interval: 5s
      start_period: 30s

  api:
    build: 
      context: backend/api
    ports:
      - 8080:8080
    environment:
      - DB_USERNAME=$DB_USERNAME
      - DB_DATABASE=$DB_DATABASE
      - DB_HOST=$DB_HOST
      - REDIS_HOST=$REDIS_HOST
      - DB_PASSWORD_DOCKER_SECRET=db_password
    depends_on:
      db:
        condition: service_healthy
        restart: true
      redis:
        condition: service_healthy
        restart: true
    secrets:
      db_password
    healthcheck:
      test: ["CMD", "/bin/healthcheck.sh"]
      interval: 30s
      retries: 5
      start_interval: 5s
      start_period: 30s

  frontend:
    build: frontend
    healthcheck:
      test: ["CMD", "/bin/healthcheck.sh"]
      interval: 30s
      retries: 5
      start_interval: 5s
      start_period: 30s

  nginx:
    build: nginx
    ports:
      - $PORT:8443
    healthcheck:
      test: ["CMD", "/bin/healthcheck.sh"]
      interval: 30s
      retries: 5
      start_interval: 5s
      start_period: 30s
    depends_on:
      frontend:
        condition: service_healthy
      api:
        condition: service_healthy

secrets:
  db_password:
    environment: DB_PASSWORD
