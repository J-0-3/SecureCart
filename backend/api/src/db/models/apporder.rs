//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.4

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "apporder")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i64,
    pub user_id: i64,
    pub order_placed: DateTime,
    pub amount_charged: i64,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::appuser::Entity",
        from = "Column::UserId",
        to = "super::appuser::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Appuser,
    #[sea_orm(has_many = "super::order_item::Entity")]
    OrderItem,
}

impl Related<super::appuser::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Appuser.def()
    }
}

impl Related<super::order_item::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::OrderItem.def()
    }
}

impl Related<super::product::Entity> for Entity {
    fn to() -> RelationDef {
        super::order_item::Relation::Product.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::order_item::Relation::Apporder.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
